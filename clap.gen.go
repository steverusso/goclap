// generated by goclap; DO NOT EDIT

package main

import (
	"flag"
	"fmt"
	"os"

	"github.com/steverusso/goclap/clap"
)

func (*goclap) usage() string {
	return `goclap - Pre-build tool to generate command line argument parsing code from Go comments

usage:
   goclap [options]

options:
   -type  <arg>       The root command struct name
   -srcdir  <arg>     Directory of source files to parse (default ".")
   -include-version   Include goclap's version info in the generated code
   -out  <arg>        Output file path (default "./clap.gen.go")
   -version           Print version info and exit
   -h                 Show this help message`
}

func (c *goclap) parse(args []string) {
	if len(args) > 0 && len(args) == len(os.Args) {
		args = args[1:]
	}

	var err error

	f := flag.FlagSet{Usage: func() {}}
	f.Var(clap.NewString(&c.rootCmdType), "type", "")
	f.Var(clap.NewString(&c.srcDir), "srcdir", "")
	f.Var(clap.NewBool(&c.incVersion), "include-version", "")
	f.Var(clap.NewString(&c.outFilePath), "out", "")
	f.Var(clap.NewBool(&c.version), "version", "")
	if err = f.Parse(args); err != nil {
		if err == flag.ErrHelp {
			fmt.Println(c.usage())
			os.Exit(0)
		}
		fmt.Fprintf(os.Stderr, "error: %v.\nRun 'goclap -h' for usage.", err)
		os.Exit(2)
	}
}
