// generated by goclap; DO NOT EDIT

package main

import (
	"fmt"
	"os"
	"strings"
)

func claperr(format string, a ...any) {
	format = "\033[1;31merror:\033[0m " + format
	fmt.Fprintf(os.Stderr, format, a...)
}

type clapUsagePrinter interface {
	printUsage(to *os.File)
}

func clapSetEnv(name string, v any) bool {
	s, ok := os.LookupEnv(name)
	if !ok {
		return false
	}
	switch v := v.(type) {
	case *string:
		*v = s
	case *bool:
		*v = (s != "false" && s != "0")
	}
	return true
}

func clapParseBool(s string) bool {
	if s == "" || s == "true" {
		return true
	}
	if s != "false" {
		claperr("invalid boolean value '%s'\n", s)
		os.Exit(1)
	}
	return false
}

func optParts(arg string) (string, string, bool) {
	if arg == "-" {
		claperr("emtpy option ('-') found\n")
		os.Exit(1)
	}
	if arg[0] == '-' {
		arg = arg[1:]
	}
	if arg[0] == '-' {
		arg = arg[1:]
	}
	if eqIdx := strings.IndexByte(arg, '='); eqIdx != -1 {
		name := arg[:eqIdx]
		eqVal := ""
		if eqIdx < len(arg) {
			eqVal = arg[eqIdx+1:]
		}
		return name, eqVal, true
	}
	return arg, "", false
}

type clapOpt struct {
	long  string
	short string
	v     any
}

func parseOpts(args []string, u clapUsagePrinter, data []clapOpt) int {
	var i int
argsLoop:
	for ; i < len(args); i++ {
		if args[i][0] != '-' {
			break
		}
		if args[i] == "--" {
			i++
			break
		}
		k, eqv, hasEq := optParts(args[i][1:])
		for z := range data {
			if k == data[z].long || k == data[z].short {
				switch v := data[z].v.(type) {
				case *bool:
					*v = clapParseBool(eqv)
				case *string:
					if hasEq {
						*v = eqv
					} else if i == len(args)-1 {
						claperr("string option '%s' needs an argument\n", k)
						os.Exit(1)
					} else {
						i++
						*v = args[i]
					}
				}
				continue argsLoop
			}
		}
		if k == "h" || k == "help" {
			u.printUsage(os.Stdout)
			os.Exit(0)
		}
		claperr("unknown option '%s'\n", k)
		os.Exit(1)
	}
	return i
}

func (*mycli) printUsage(to *os.File) {
	fmt.Fprintf(to, `%[1]s - print a string with a prefix

usage:
   %[1]s [options] [input]

options:
   -p, --prefix  <arg>   the value to prepend to the input string [$MY_PREFIX]
   -h, --help            show this help message

arguments:
   [input]   the user provided input [$MY_INPUT]
`, os.Args[0])
}

func (c *mycli) parse(args []string) {
	if len(args) > 0 && len(args) == len(os.Args) {
		args = args[1:]
	}
	clapSetEnv("MY_PREFIX", &c.prefix)
	clapSetEnv("MY_INPUT", &c.input)
	i := parseOpts(args, c, []clapOpt{
		{"prefix", "p", &c.prefix},
	})
	args = args[i:]
	if len(args) < 1 {
		return
	}
	c.input = args[0]
}
