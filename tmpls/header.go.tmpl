// generated by goclap{{ with .Version }} ({{ . }}){{ end }}; DO NOT EDIT

package {{ .PkgName }}

import (
	{{- if .NeedsStrconvCode }}
	"errors"{{ end }}
	"fmt"
	"os"
	{{- if .NeedsStrconvCode }}
	"strconv"{{ end }}
	"strings"
)

func claperr(format string, a ...any) {
	format = "\033[1;31merror:\033[0m " + format
	fmt.Fprintf(os.Stderr, format, a...)
}

type clapParser struct {
	usg  func(to *os.File)
	args []string
	idx  int

{{- if .NeedsEnvCode }}

	envName string
	envVal  string
{{- end }}

	optName  string
	optEqVal string
	optHasEq bool
}

func (p *clapParser) exitUsgGood() {
	p.usg(os.Stdout)
	os.Exit(0)
}

{{- if .RootCmd.HasReqArgSomewhere }}

func (p *clapParser) exitMissingArg(name string) {
	claperr("not enough args: no \033[1;33m%s\033[0m provided\n", name)
	p.usg(os.Stderr)
	os.Exit(1)
}
{{- end }}

{{- if .RootCmd.HasSubcmds }}

func (p *clapParser) exitUnknownCmd(name string) {
	claperr("unknown command '%s'\n", name)
	p.usg(os.Stderr)
	os.Exit(1)
}
{{- end }}

{{- if .NeedsEnvCode }}

func (p *clapParser) stageEnv(name string) (ok bool) {
	p.envName = name
	p.envVal, ok = os.LookupEnv(name)
	return ok
}
{{- end }}

func (p *clapParser) stageOpt() bool {
	if p.optName != "" {
		p.idx++
	}
	if p.idx > len(p.args)-1 {
		p.optName = ""
		return false
	}
	arg := p.args[p.idx]
	if arg[0] != '-' {
		p.optName = ""
		return false
	}
	arg = arg[1:]
	if arg == "" {
		claperr("emtpy option ('-') found\n")
		os.Exit(1)
	}
	if arg[0] == '-' {
		arg = arg[1:]
	}
	if arg == "" {
		p.idx++
		p.optName = ""
		return false
	}

	p.optEqVal = ""
	if eqIdx := strings.IndexByte(arg, '='); eqIdx != -1 {
		p.optName = arg[:eqIdx]
		if eqIdx < len(arg) {
			p.optEqVal = arg[eqIdx+1:]
		}
		p.optHasEq = true
	} else {
		p.optName = arg
		p.optHasEq = false
	}
	return true
}

func (p *clapParser) nextStr() string {
{{- if .NeedsEnvCode }}
	if p.envName != "" {
		return p.envVal
	}
{{- end }}
	if p.optName != "" {
		if p.optHasEq {
			return p.optEqVal
		}
		if p.idx == len(p.args)-1 {
			claperr("option '%s' needs an argument\n", p.optName)
			os.Exit(1)
		}
		p.idx++
		return p.args[p.idx]
	}
	p.idx++
	return p.args[p.idx-1]
}

{{- if or .Types.HasBool .NeedsStrconvCode }}

func (p *clapParser) exitBadInput(typ string, err error) {
	var forWhat string
	switch {
	case p.optName != "":
		forWhat = "option '" + p.optName + "'"
	{{- if .NeedsEnvCode }}
	case p.envName != "":
		forWhat = "env var '" + p.envName + "'"{{ end }}
	default:
		forWhat = "argument"
	}
	claperr("invalid %s for %s: %v\n", typ, forWhat, err)
	os.Exit(1)
}
{{- end }}

{{- if .Types.HasAny "bool" }}

func (p *clapParser) thisBool() bool {
	{{ if .NeedsEnvCode }}var s string
	if p.envName != "" {
		s = p.envVal
	} else {
		s = p.optEqVal
	}{{ else }}s := p.optEqVal{{ end }}
	if s == "" || s == "true" || s == "1" {
		return true
	}
	if s != "false" && s != "0" {
		p.exitBadInput("bool", fmt.Errorf("%q not recognized as a boolean", s))
	}
	return false
}
{{- end }}

{{- if .Types.HasAny "int" }}

func (p *clapParser) nextInt() int {
	u64, err := strconv.ParseInt(p.nextStr(), 10, 0)
	if err != nil {
		p.exitBadInput("int", errors.Unwrap(err))
	}
	return int(u64)
}
{{- end }}

{{- if .Types.HasAny "int8" }}

func (p *clapParser) nextInt8() int8 {
	u64, err := strconv.ParseInt(p.nextStr(), 10, 8)
	if err != nil {
		p.exitBadInput("int8", errors.Unwrap(err))
	}
	return int8(u64)
}
{{- end }}

{{- if .Types.HasAny "int16" }}

func (p *clapParser) nextInt16() int16 {
	u64, err := strconv.ParseInt(p.nextStr(), 10, 16)
	if err != nil {
		p.exitBadInput("int16", errors.Unwrap(err))
	}
	return int16(u64)
}
{{- end }}

{{- if .Types.HasAny "int32" "rune" }}

func (p *clapParser) nextInt32() int32 {
	u64, err := strconv.ParseInt(p.nextStr(), 10, 32)
	if err != nil {
		p.exitBadInput("int32", errors.Unwrap(err))
	}
	return int32(u64)
}
{{- end }}

{{- if .Types.HasAny "int64" }}

func (p *clapParser) nextInt64() int64 {
	u64, err := strconv.ParseInt(p.nextStr(), 10, 64)
	if err != nil {
		p.exitBadInput("int64", errors.Unwrap(err))
	}
	return u64
}
{{- end }}

{{- if .Types.HasAny "uint" }}

func (p *clapParser) nextUint() uint {
	u64, err := strconv.ParseUint(p.nextStr(), 10, 0)
	if err != nil {
		p.exitBadInput("uint", errors.Unwrap(err))
	}
	return uint(u64)
}
{{- end }}

{{- if .Types.HasAny "uint8" "byte" }}

func (p *clapParser) nextUint8() uint8 {
	u64, err := strconv.ParseUint(p.nextStr(), 10, 8)
	if err != nil {
		p.exitBadInput("uint8", errors.Unwrap(err))
	}
	return uint8(u64)
}
{{- end }}

{{- if .Types.HasAny "uint16" }}

func (p *clapParser) nextUint16() uint16 {
	u64, err := strconv.ParseUint(p.nextStr(), 10, 16)
	if err != nil {
		p.exitBadInput("uint16", errors.Unwrap(err))
	}
	return uint16(u64)
}
{{- end }}

{{- if .Types.HasAny "uint32" }}

func (p *clapParser) nextUint32() uint32 {
	u64, err := strconv.ParseUint(p.nextStr(), 10, 32)
	if err != nil {
		p.exitBadInput("uint32", errors.Unwrap(err))
	}
	return uint32(u64)
}
{{- end }}

{{- if .Types.HasAny "uint64" }}

func (p *clapParser) nextUint64() uint64 {
	u64, err := strconv.ParseUint(p.nextStr(), 10, 64)
	if err != nil {
		p.exitBadInput("uint64", errors.Unwrap(err))
	}
	return u64
}
{{- end }}

{{- if .Types.HasAny "float32" }}

func (p *clapParser) nextFloat32() float32 {
	f64, err := strconv.ParseFloat(p.nextStr(), 32)
	if err != nil {
		p.exitBadInput("float32", errors.Unwrap(err))
	}
	return float32(f64)
}
{{- end }}

{{- if .Types.HasAny "float64" }}

func (p *clapParser) nextFloat64() float64 {
	f64, err := strconv.ParseFloat(p.nextStr(), 64)
	if err != nil {
		p.exitBadInput("float64", errors.Unwrap(err))
	}
	return f64
}
{{- end }}
