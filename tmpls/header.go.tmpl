// generated by goclap{{ if .IncVersion }} ({{ .Version }}){{ end }}; DO NOT EDIT

package {{ .PkgName }}

import (
	"fmt"
	"os"
	{{- with .Types }}{{ if or .HasInt .HasUint .HasFloat }}
	"strconv"{{ end }}{{ end }}
	"strings"
)

func claperr(format string, a ...any) {
	format = "\033[1;31merror:\033[0m " + format
	fmt.Fprintf(os.Stderr, format, a...)
}

type clapUsagePrinter interface {
	printUsage(to *os.File)
}

type clapper struct {
	cmd      clapUsagePrinter
	args     []string
	idx      int
	skip     bool
	optsDone bool

{{- if .RootCmd.HasEnvArgOrOptSomewhere }}

	envName string
	envVal  string
{{- end }}

	optName  string
	optEqVal string
	optHasEq bool
}

func (c *clapper) exitUsgGood() {
	c.cmd.printUsage(os.Stdout)
	os.Exit(0)
}

{{- if .RootCmd.HasReqArgSomewhere }}

func (z *clapper) exitMissingArg(name string) {
	claperr("not enough args: no \033[1;33m%s\033[0m provided\n", name)
	z.cmd.printUsage(os.Stderr)
	os.Exit(1)
}
{{- end }}

{{- if .RootCmd.HasSubcmds }}

func (z *clapper) exitUnknownCmd(name string) {
	claperr("unknown command '%s'\n", name)
	z.cmd.printUsage(os.Stderr)
	os.Exit(1)
}
{{- end }}

{{- if .RootCmd.HasEnvArgOrOptSomewhere }}

func (z *clapper) stageEnv(name string) (ok bool) {
	z.envName = name
	z.envVal, ok = os.LookupEnv(name)
	return ok
}
{{- end }}

func (c *clapper) stageOpt() bool {
	if c.skip {
		c.idx++
	}
	if c.args[c.idx][0] != '-' {
		c.optsDone = true
		return false
	}
	if c.args[c.idx] == "--" {
		c.idx++
		c.optsDone = true
		return false
	}

	arg := c.args[c.idx]
	if arg == "-" {
		claperr("emtpy option ('-') found\n")
		os.Exit(1)
	}
	if arg[0] == '-' {
		arg = arg[1:]
	}
	if arg[0] == '-' {
		arg = arg[1:]
	}
	c.optEqVal = ""
	if eqIdx := strings.IndexByte(arg, '='); eqIdx != -1 {
		c.optName = arg[:eqIdx]
		if eqIdx < len(arg) {
			c.optEqVal = arg[eqIdx+1:]
		}
		c.optHasEq = true
	} else {
		c.optName = arg
		c.optHasEq = false
	}

	c.skip = false
	return true
}

func (c *clapper) val() string {
{{- if .RootCmd.HasEnvArgOrOptSomewhere }}
	if c.envName != "" {
		return c.envVal
	}
{{- end }}
	if c.optsDone {
		s := c.args[c.idx]
		c.idx++
		return s
	}
	if c.optHasEq {
		return c.optEqVal
	}
	c.skip = true
	if c.idx == len(c.args)-1 {
		claperr("option '%s' needs an argument\n", c.optName)
		os.Exit(1)
	}
	return c.args[c.idx+1]
}

{{- if .Types.HasBool }}

func (c *clapper) pBool() bool {
	s := c.optEqVal
	if s == "" || s == "true" || s == "1" {
		return true
	}
	if s != "false" && s != "0" {
		claperr("invalid boolean value '%s'\n", s)
		os.Exit(1)
	}
	return false
}
{{- end }}

{{- if .Types.HasInt }}

func (c *clapper) pInt(bs int) int64 {
	i64, err := strconv.ParseInt(c.val(), 10, bs)
	if err != nil {
		claperr("invalid argument for '%s': %v\n", c.optName, err)
		os.Exit(1)
	}
	return i64
}
{{- end }}

{{- if .Types.HasUint }}

func (c *clapper) pUint(bs int) uint64 {
	u64, err := strconv.ParseUint(c.val(), 10, bs)
	if err != nil {
		claperr("invalid argument for '%s': %v\n", c.optName, err)
		os.Exit(1)
	}
	return u64
}
{{- end }}

{{- if .Types.HasFloat }}

func (c *clapper) pFloat(bs int) float64 {
	f64, err := strconv.ParseFloat(c.val(), bs)
	if err != nil {
		claperr("invalid argument for '%s': %v\n", c.optName, err)
		os.Exit(1)
	}
	return f64
}
{{- end }}
