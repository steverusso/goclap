// generated by goclap{{ if .IncVersion }} ({{ .Version }}){{ end }}; DO NOT EDIT

package {{ .PkgName }}

import (
	"fmt"
	"os"
	{{- with .Types }}{{ if or .HasInt .HasUint .HasFloat }}
	"strconv"{{ end }}{{ end }}
	"strings"
)

func claperr(format string, a ...any) {
	format = "\033[1;31merror:\033[0m " + format
	fmt.Fprintf(os.Stderr, format, a...)
}

type clapper struct {
	usg  func(to *os.File)
	args []string
	idx  int

{{- if .RootCmd.HasEnvArgOrOptSomewhere }}

	envName string
	envVal  string
{{- end }}

	optName  string
	optEqVal string
	optHasEq bool
}

func (z *clapper) exitUsgGood() {
	z.usg(os.Stdout)
	os.Exit(0)
}

{{- if .RootCmd.HasReqArgSomewhere }}

func (z *clapper) exitMissingArg(name string) {
	claperr("not enough args: no \033[1;33m%s\033[0m provided\n", name)
	z.usg(os.Stderr)
	os.Exit(1)
}
{{- end }}

{{- if .RootCmd.HasSubcmds }}

func (z *clapper) exitUnknownCmd(name string) {
	claperr("unknown command '%s'\n", name)
	z.usg(os.Stderr)
	os.Exit(1)
}
{{- end }}

{{- if .RootCmd.HasEnvArgOrOptSomewhere }}

func (z *clapper) stageEnv(name string) (ok bool) {
	z.envName = name
	z.envVal, ok = os.LookupEnv(name)
	return ok
}
{{- end }}

func (z *clapper) stageOpt() bool {
	if z.optName != "" {
		z.idx++
	}
	if z.idx > len(z.args)-1 {
		z.optName = ""
		return false
	}
	arg := z.args[z.idx]
	if arg[0] != '-' {
		z.optName = ""
		return false
	}
	arg = arg[1:]
	if arg == "" {
		claperr("emtpy option ('-') found\n")
		os.Exit(1)
	}
	if arg[0] == '-' {
		arg = arg[1:]
	}
	if arg == "" {
		z.idx++
		z.optName = ""
		return false
	}

	z.optEqVal = ""
	if eqIdx := strings.IndexByte(arg, '='); eqIdx != -1 {
		z.optName = arg[:eqIdx]
		if eqIdx < len(arg) {
			z.optEqVal = arg[eqIdx+1:]
		}
		z.optHasEq = true
	} else {
		z.optName = arg
		z.optHasEq = false
	}
	return true
}

func (z *clapper) nextStr() string {
{{- if .RootCmd.HasEnvArgOrOptSomewhere }}
	if z.envName != "" {
		return z.envVal
	}
{{- end }}
	if z.optName != "" {
		if z.optHasEq {
			return z.optEqVal
		}
		if z.idx == len(z.args)-1 {
			claperr("option '%s' needs an argument\n", z.optName)
			os.Exit(1)
		}
		z.idx++
		return z.args[z.idx]
	}
	z.idx++
	return z.args[z.idx-1]
}

{{- if .Types.HasBool }}

func (z *clapper) thisBool() bool {
	{{ if .RootCmd.HasEnvArgOrOptSomewhere }}var s string
	if z.envName != "" {
		s = z.envVal
	} else {
		s = z.optEqVal
	}{{ else }}s := z.optEqVal{{ end }}
	if s == "" || s == "true" || s == "1" {
		return true
	}
	if s != "false" && s != "0" {
		claperr("invalid boolean value '%s'\n", s)
		os.Exit(1)
	}
	return false
}
{{- end }}

{{- if .Types.HasInt }}

func (z *clapper) nextInt(bs int) int64 {
	i64, err := strconv.ParseInt(z.nextStr(), 10, bs)
	if err != nil {
		claperr("invalid argument for '%s': %v\n", z.optName, err)
		os.Exit(1)
	}
	return i64
}
{{- end }}

{{- if .Types.HasUint }}

func (z *clapper) nextUint(bs int) uint64 {
	u64, err := strconv.ParseUint(z.nextStr(), 10, bs)
	if err != nil {
		claperr("invalid argument for '%s': %v\n", z.optName, err)
		os.Exit(1)
	}
	return u64
}
{{- end }}

{{- if .Types.HasFloat }}

func (z *clapper) nextFloat(bs int) float64 {
	f64, err := strconv.ParseFloat(z.nextStr(), bs)
	if err != nil {
		claperr("invalid argument for '%s': %v\n", z.optName, err)
		os.Exit(1)
	}
	return f64
}
{{- end }}
