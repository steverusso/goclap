
func (c *{{ .TypeName }}) parse(args []string) {
	{{- /* Drop the program name from args if it's there. */ -}}
	{{ if .IsRoot }}
	if len(args) > 0 && len(args) == len(os.Args) {
		args = args[1:]
	}
	{{- end }}
	z := clapper{cmd: c, args: args}
	{{- /* Parse environment variables. */}}
	{{- with .EnvVals }}
	{{- range . }}
	if z.stageEnv("{{ .VarName }}") {
		{{- if .FieldType.IsBool }}
		c.{{ .FieldName }} = z.pBool()
		{{- else if .FieldType.IsString }}
		c.{{ .FieldName }} = z.val()
		{{- end }}
	}
	{{- end }}
	z.currEnvName, z.currEnvVal = "", ""
	{{- end }}

	for z.stageOpt() {
		switch z.curr.key {
	{{- range .Opts }}
		case {{ .QuotedPlainNames }}:
		{{- if eq .Long "help" }}
			z.exitUsgGood()
			{{- continue }}
		{{- end }}
		{{- if .FieldType.IsBool }}
			c.{{ .FieldName }} = z.pBool()
		{{- else if .FieldType.IsString }}
			c.{{ .FieldName }} = z.val()
		{{- else if .FieldType.IsInt }}
			c.{{ .FieldName }} = {{ .FieldType }}(z.pInt({{ .FieldType.BitSize }}))
		{{- else if .FieldType.IsUint }}
			c.{{ .FieldName }} = {{ .FieldType }}(z.pUint({{ .FieldType.BitSize }}))
		{{- end -}}
	{{- end }}
		default:
			claperr("unknown option '%s'\n", z.curr.key)
			os.Exit(1)
		}
	}

	{{- /* Arguments. */ -}}
	{{- if .HasArgs }}
	args = args[z.idx:]

		{{- /* Add error handling for missing arguments that are required. */ -}}
		{{- range $i, $arg := .RequiredArgs }}
	if len(args) < {{ add $i 1 }} {
		exitMissingArg(c, "{{ $arg.UsgName }}")
	}
		{{- end -}}

		{{- range $i, $arg := .Args }}

			{{- if not $arg.IsRequired }}
	if len(args) < {{ add $i 1 }} {
		return
	}
			{{- end }}

			{{- if .FieldType.IsString }}
	c.{{ .FieldName }} = z.val()
			{{- else if .FieldType.IsInt }}
	c.{{ .FieldName }} = {{ .FieldType }}(z.pInt({{ .FieldType.BitSize }}))
			{{- else if .FieldType.IsUint }}
	c.{{ .FieldName }} = {{ .FieldType }}(z.pUint({{ .FieldType.BitSize }}))
			{{- else if .FieldType.IsFloat }}
	c.{{ .FieldName }} = {{ .FieldType }}(z.pFloat({{ .FieldType.BitSize }}))
			{{- end -}}

		{{- end -}}{{- /* range all args */ -}}
	{{- end }}{{- /* if args */ -}}

	{{- /* Subcommands. */ -}}
	{{- if .HasSubcmds }}
	if z.idx >= len(args) {
		c.printUsage(os.Stderr)
		os.Exit(1)
	}
	switch args[z.idx] {
	{{- range .Subcmds }}
	case {{ .QuotedNames }}:
		c.{{ .FieldName }} = new({{ .TypeName }})
		c.{{ .FieldName }}.parse(args[z.idx+1:])
	{{- end }}
	default:
		z.exitUnknownCmd(args[z.idx])
	}
	{{- end }}
}
