
func (c *{{ .TypeName }}) Parse(args []string) {
	p := clapCommand{
		usage: c.UsageHelp,

	{{- /* Options. */ -}}
	{{- if .HasNonHelpOpts }}
		opts: []clapInput{
		{{- range .Opts }}
		{{- if ne .Name "h" }}
			{name: "{{ .Name }}", value: clapNew{{ .FieldType.ClapValueType }}(&c.{{ .FieldName }})
			{{- with .EnvVar }}, envName: "{{ . }}"{{ end }}},
		{{- end }}
		{{- end }}
		},
	{{- end }}

	{{- /* Arguments. */ -}}
	{{- with .Args }}
		args: []clapInput{
		{{- range . }}
			{name: "{{ .UsgName }}", value: clapNew{{ .FieldType.ClapValueType }}(&c.{{ .FieldName }})
			{{- if .IsRequired }}, required: true{{ end }}
			{{- with .EnvVar }}, envName: "{{ . }}"{{ end }}},
		{{- end }}
		},
	{{- end }}

	{{- /* Subcommands. */ -}}
	{{- with .Subcmds }}
		cmds: []string{
		{{- range . }}
			{{ .QuotedNames }},
		{{- end }}
		},
	{{- end }}
	}
	{{ with .Subcmds }}rest{{ else }}_{{ end }}, err := p.parse(args)
	if err != nil {
		clapFatalf("{{ .Parents }}{{ .UsgName }}", err.Error())
	}

	{{- /* Subcommands. */ -}}
	{{- with .Subcmds }}
	switch rest[0] {
	{{- range . }}
	case {{ .QuotedNames }}:
		c.{{ .FieldName }} = &{{ .TypeName }}{}
		c.{{ .FieldName }}.Parse(rest[1:])
	{{- end }}
	}
	{{- end }}
}
