
func (c *{{ .TypeName }}) Parse(args []string) {
	{{- /* Drop the program name from args if it's there. */ -}}
	{{ if .IsRoot }}
	if len(args) > 0 && len(args) == len(os.Args) {
		args = args[1:]
	}
	{{- end }}
	p := clap.NewCommandParser("{{ .Parents }}{{ .UsgName }}")
	p.CustomUsage = c.UsageHelp

	{{- range .Opts }}
		{{- if ne .Name "h" }}
	p.Flag("{{ .Name }}", clap.New{{ .FieldType.ClapValueType }}(&c.{{ .FieldName }}))
		{{- with .EnvVar }}.Env("{{ . }}"){{ end }}
		{{- end }}
	{{- end }}

	{{- /* Arguments. */ -}}
	{{- range .Args }}
	p.Arg("{{ .UsgName }}", clap.New{{ .FieldType.ClapValueType }}(&c.{{ .FieldName }}))
		{{- with .EnvVar }}.Env("{{ . }}"){{ end }}
		{{- if .IsRequired }}.Require(){{ end }}
	{{- end }}
	{{ with .Subcmds }}rest := {{ end }}p.Parse(args)

	{{- /* Subcommands. */ -}}
	{{- with .Subcmds }}

	if len(rest) == 0 {
		p.Fatalf("no subcommand provided")
	}
	switch rest[0] {
	{{- range . }}
	case {{ .QuotedNames }}:
		c.{{ .FieldName }} = &{{ .TypeName }}{}
		c.{{ .FieldName }}.Parse(rest[1:])
	{{- end }}
	default:
		p.Fatalf("unknown subcommand '%s'", rest[0])
	}
	{{- end }}
}
