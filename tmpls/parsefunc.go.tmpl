
func (c *{{ .TypeName }}) parse(args []string) {
	{{- /* Drop the program name from args if it's there. */ -}}
	{{ if .IsRoot }}
	if len(args) > 0 && len(args) == len(os.Args) {
		args = args[1:]
	}
	{{- end -}}

	{{- /* Parse environment variables. */}}
	{{- range .EnvVals }}
	clapSetEnv("{{ .VarName }}", &c.{{ .FieldName }})
	{{- end }}

	{{- /* Parse options. */}}
	{{ if or .HasArgs .HasSubcmds }}i := {{ end -}}
	parseOpts(args, c, {{ if not .HasNonHelpOpt }}nil){{ else }}[]clapOpt{
	{{- range .Opts }}
		{{- if ne .Long "help" }}
		{"{{ .Long }}", "{{ .Short }}", &c.{{ .FieldName }}},
		{{- end -}}
	{{- end }}
	}){{ end }}

	{{- /* Arguments. */ -}}
	{{- if .HasArgs }}
	args = args[i:]

		{{- /* Add error handling for missing arguments that are required. */ -}}
		{{- range $i, $arg := .RequiredArgs }}
	if len(args) < {{ add $i 1 }} {
		exitMissingArg(c, "{{ $arg.UsgName }}")
	}
		{{- end -}}

		{{- range $i, $arg := .Args }}

			{{- if not $arg.IsRequired }}
	if len(args) < {{ add $i 1 }} {
		return
	}
			{{- end -}}

			{{- /* Parse positional args based on their type. */ -}}
			{{- if $arg.FieldType.IsString }}
	c.{{ $arg.FieldName }} = args[{{ $i }}]
			{{- end -}}

		{{ end -}}{{- /* range all args */ -}}
	{{- end }}{{- /* if args */ -}}

	{{- /* Subcommands. */ -}}
	{{- if .HasSubcmds }}
	if i >= len(args) {
		c.printUsage(os.Stderr)
		os.Exit(1)
	}
	switch args[i] {
	{{- range .Subcmds }}
	case {{ .QuotedNames }}:
		c.{{ .FieldName }} = new({{ .TypeName }})
		c.{{ .FieldName }}.parse(args[i+1:])
	{{- end }}
	default:
		exitUnknownCmd(c, args[i])
	}
	{{- end }}
}
