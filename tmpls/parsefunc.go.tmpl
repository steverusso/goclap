
func (c *{{ .TypeName }}) parse(args []string) {
	{{- /* Drop the program name from args if it's there. */ -}}
	{{ if .IsRoot }}
	if len(args) > 0 && len(args) == len(os.Args) {
		args = args[1:]
	}
	{{- end }}
	p := clapParser{usg: c.printUsage, args: args}
	{{- /* Parse environment variables. */}}
	{{- with .EnvVals }}
	{{- range . }}
	if p.stageEnv("{{ .VarName }}") {
		c.{{ .FieldName }} = p.{{ .FieldType.ClapIterMethodName }}()
	}
	{{- end }}
	p.envName, p.envVal = "", ""
	{{- end }}

	{{- /* Parse options. */}}
	for p.stageOpt() {
		switch p.optName {
	{{- range .Opts }}
		case {{ .QuotedPlainNames }}:
		{{- if eq .Long "help" }}
			p.exitUsgGood()
			{{- continue }}
		{{- end }}
			c.{{ .FieldName }} = p.{{ .FieldType.ClapIterMethodName }}()
	{{- end }}
		default:
			claperr("unknown option '%s'\n", p.optName)
			os.Exit(1)
		}
	}

	{{- /* Arguments. */ -}}
	{{- with .Args }}
	args = args[p.idx:]

		{{- range $i, $arg := . }}
	if len(args) < {{ add $i 1 }} {
			{{- if $arg.IsRequired }}
		p.exitMissingArg("{{ $arg.UsgName }}")
			{{- else }}
		return
			{{- end }}
	}
	c.{{ .FieldName }} = p.{{ .FieldType.ClapIterMethodName }}()
		{{- end -}}{{- /* range all args */ -}}
	{{- end }}{{- /* with args */ -}}

	{{- /* Subcommands. */ -}}
	{{- with .Subcmds }}
	if p.idx >= len(args) {
		c.printUsage(os.Stderr)
		os.Exit(1)
	}
	switch args[p.idx] {
	{{- range . }}
	case {{ .QuotedNames }}:
		c.{{ .FieldName }} = new({{ .TypeName }})
		c.{{ .FieldName }}.parse(args[p.idx+1:])
	{{- end }}
	default:
		p.exitUnknownCmd(args[p.idx])
	}
	{{- end }}
}
